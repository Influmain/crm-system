'use client';

import { createContext, useContext, useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { supabase } from '@/lib/supabase';
import type { User } from '@supabase/supabase-js';

// ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ ÌÉÄÏûÖ Ï†ïÏùò
interface UserProfile {
  id: string;
  email: string;
  full_name: string;
  phone?: string;
  department?: string;
  role: 'admin' | 'counselor';
  is_active: boolean;
}

// AuthContext ÌÉÄÏûÖ Ï†ïÏùò
interface AuthContextType {
  user: User | null;
  userProfile: UserProfile | null;
  loading: boolean;
  signIn: (email: string, password: string) => Promise<{ error?: any }>;
  signOut: () => Promise<void>;
  isAdmin: boolean;
  isCounselor: boolean;
  emergencyReset: () => void;
}

// Context ÏÉùÏÑ±
const AuthContext = createContext<AuthContextType | undefined>(undefined);

// Î¨¥ÌïúÎ°úÎî© Î∞©ÏßÄ Ìó¨Ìçº Ìï®ÏàòÎì§
const INIT_TIMEOUT = 8000; // 8Ï¥à ÌÉÄÏûÑÏïÑÏõÉ
const MAX_RETRIES = 2; // ÏµúÎåÄ Ïû¨ÏãúÎèÑ ÌöüÏàò

// ÏôÑÏ†ÑÌïú Ï∫êÏãú Ï†ïÎ¶¨ Ìï®Ïàò
const clearAllCache = async () => {
  console.log('üßπ ÏôÑÏ†ÑÌïú Ï∫êÏãú Ï†ïÎ¶¨ ÏãúÏûë');
  
  try {
    // Î°úÏª¨/ÏÑ∏ÏÖò Ïä§ÌÜ†Î¶¨ÏßÄ
    localStorage.clear();
    sessionStorage.clear();
    
    // IndexedDB (ÎπÑÎèôÍ∏∞, ÌÉÄÏûÑÏïÑÏõÉ Ï†ÅÏö©)
    if ('indexedDB' in window) {
      try {
        const dbs = await Promise.race([
          indexedDB.databases(),
          new Promise((_, reject) => setTimeout(() => reject(new Error('IndexedDB timeout')), 3000))
        ]) as IDBDatabaseInfo[];
        
        await Promise.all(
          dbs.map(db => {
            if (db.name) {
              return new Promise<void>((resolve) => {
                const deleteReq = indexedDB.deleteDatabase(db.name!);
                deleteReq.onsuccess = () => resolve();
                deleteReq.onerror = () => resolve();
                setTimeout(() => resolve(), 2000); // 2Ï¥à ÌÉÄÏûÑÏïÑÏõÉ
              });
            }
            return Promise.resolve();
          })
        );
      } catch (error) {
        console.log('IndexedDB Ï†ïÎ¶¨ Ïã§Ìå®:', error);
      }
    }
    
    // Ïø†ÌÇ§ Ï†ïÎ¶¨
    if (typeof document !== 'undefined') {
      document.cookie.split(';').forEach(cookie => {
        const eqPos = cookie.indexOf('=');
        const name = eqPos > -1 ? cookie.substr(0, eqPos).trim() : cookie.trim();
        if (name.includes('supabase') || name.includes('auth') || name.includes('sb-')) {
          document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/;domain=${window.location.hostname}`;
          document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/`;
        }
      });
    }
    
    console.log('‚úÖ Ï∫êÏãú Ï†ïÎ¶¨ ÏôÑÎ£å');
  } catch (error) {
    console.error('Ï∫êÏãú Ï†ïÎ¶¨ Ï§ë Ïò§Î•ò:', error);
  }
};

// ÌÉÄÏûÑÏïÑÏõÉÏù¥ ÏûàÎäî ÏÑ∏ÏÖò ÌôïÏù∏
const getSessionWithTimeout = async (timeoutMs: number = INIT_TIMEOUT) => {
  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), timeoutMs);
  
  try {
    const { data, error } = await supabase.auth.getSession();
    clearTimeout(timeoutId);
    return { data, error };
  } catch (error) {
    clearTimeout(timeoutId);
    throw error;
  }
};

// Provider Ïª¥Ìè¨ÎÑåÌä∏
export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);
  const [loading, setLoading] = useState(true);
  const [hasRedirected, setHasRedirected] = useState(false);
  const [initAttempts, setInitAttempts] = useState(0);
  const [emergencyMode, setEmergencyMode] = useState(false);
  const router = useRouter();

  // Í∏¥Í∏â Î¶¨ÏÖã Ìï®Ïàò (ÏÇ¨Ïö©ÏûêÍ∞Ä ÏàòÎèôÏúºÎ°ú Ìò∏Ï∂ú Í∞ÄÎä•)
  const emergencyReset = async () => {
    console.log('üÜò Í∏¥Í∏â Î¶¨ÏÖã Ïã§Ìñâ');
    setEmergencyMode(true);
    setLoading(true);
    
    await clearAllCache();
    
    // Supabase Ïó∞Í≤∞ Î¶¨ÏÖã
    try {
      await supabase.auth.signOut();
    } catch (error) {
      console.log('Í∞ïÏ†ú Î°úÍ∑∏ÏïÑÏõÉ Ïã§Ìå®:', error);
    }
    
    setUser(null);
    setUserProfile(null);
    setHasRedirected(false);
    setInitAttempts(0);
    setLoading(false);
    setEmergencyMode(false);
    
    // Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
    setTimeout(() => {
      window.location.href = '/login';
    }, 500);
  };

  // ÏïàÏ†ÑÌïú ÌîÑÎ°úÌïÑ Î°úÎìú
  const loadUserProfile = async (userId: string, isFromSignIn: boolean = false) => {
    try {
      console.log('ÌîÑÎ°úÌïÑ Î°úÎìú ÏãúÎèÑ:', userId);
      
      // ÌÉÄÏûÑÏïÑÏõÉ Ï†ÅÏö©
      const profilePromise = supabase
        .from('users')
        .select('*')
        .eq('id', userId)
        .single();
      
      const timeoutPromise = new Promise((_, reject) =>
        setTimeout(() => reject(new Error('ÌîÑÎ°úÌïÑ Î°úÎìú ÌÉÄÏûÑÏïÑÏõÉ')), 5000)
      );
      
      const { data, error } = await Promise.race([profilePromise, timeoutPromise]) as any;

      if (error) {
        console.error('ÌîÑÎ°úÌïÑ Î°úÎìú Ïò§Î•ò:', error);
        throw error;
      }

      console.log('ÌîÑÎ°úÌïÑ Î°úÎìú ÏÑ±Í≥µ:', data.email);
      setUserProfile(data);

      // Î¶¨Îã§Ïù¥Î†âÌä∏ Î°úÏßÅ
      const currentPath = window.location.pathname;
      const shouldRedirect = 
        !hasRedirected && 
        (isFromSignIn || currentPath === '/login' || currentPath === '/' || currentPath === '/dashboard');

      if (shouldRedirect) {
        const targetPath = data.role === 'admin' ? '/admin/dashboard' : '/counselor/dashboard';
        console.log('Î¶¨Îã§Ïù¥Î†âÌä∏:', targetPath);
        
        setHasRedirected(true);
        setLoading(false);
        
        setTimeout(() => {
          window.location.href = targetPath;
        }, 100);
      } else {
        setLoading(false);
      }
      
    } catch (error: any) {
      console.error('ÌîÑÎ°úÌïÑ Î°úÎìú Ïã§Ìå®:', error);
      
      // ÌîÑÎ°úÌïÑ Î°úÎìú Ïã§Ìå® Ïãú Î°úÍ∑∏ÏïÑÏõÉ Ï≤òÎ¶¨
      setUser(null);
      setUserProfile(null);
      setLoading(false);
      
      setTimeout(() => {
        window.location.href = '/login';
      }, 1000);
    }
  };

  // ÏïàÏ†ÑÌïú ÏÑ∏ÏÖò Ï¥àÍ∏∞Ìôî
  const initializeAuth = async () => {
    if (initAttempts >= MAX_RETRIES) {
      console.log('‚ö†Ô∏è ÏµúÎåÄ Ïû¨ÏãúÎèÑ ÌöüÏàò ÎèÑÎã¨, Í∏¥Í∏â Î¶¨ÏÖã Ïã§Ìñâ');
      await emergencyReset();
      return;
    }

    try {
      setInitAttempts(prev => prev + 1);
      console.log(`Ïù∏Ï¶ù Ï¥àÍ∏∞Ìôî ÏãúÎèÑ ${initAttempts + 1}/${MAX_RETRIES + 1}`);
      
      const { data: { session }, error } = await getSessionWithTimeout();
      
      if (error) {
        throw error;
      }

      console.log('ÏÑ∏ÏÖò ÌôïÏù∏ ÏôÑÎ£å:', session?.user?.email || 'ÏÑ∏ÏÖò ÏóÜÏùå');
      setUser(session?.user ?? null);
      
      if (session?.user) {
        await loadUserProfile(session.user.id, false);
      } else {
        // Î≥¥Ìò∏Îêú ÌéòÏù¥ÏßÄÏóêÏÑú ÏÑ∏ÏÖò ÏóÜÏúºÎ©¥ Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄÎ°ú
        const currentPath = window.location.pathname;
        if (currentPath.includes('/admin/') || currentPath.includes('/counselor/')) {
          console.log('Î≥¥Ìò∏Îêú ÌéòÏù¥ÏßÄÏóêÏÑú ÏÑ∏ÏÖò ÏóÜÏùå ‚Üí Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄÎ°ú');
          window.location.href = '/login';
          return;
        }
        setLoading(false);
      }
      
      // ÏÑ±Í≥µÌïòÎ©¥ Ïû¨ÏãúÎèÑ Ïπ¥Ïö¥ÌÑ∞ Î¶¨ÏÖã
      setInitAttempts(0);
      
    } catch (error: any) {
      console.error('ÏÑ∏ÏÖò Ï¥àÍ∏∞Ìôî Ïã§Ìå®:', error);
      
      if (initAttempts >= MAX_RETRIES) {
        console.log('ÏµúÎåÄ Ïû¨ÏãúÎèÑ ÎèÑÎã¨, Í∏¥Í∏â Î™®Îìú ÌôúÏÑ±Ìôî');
        setEmergencyMode(true);
        setLoading(false);
      } else {
        // Ïû¨ÏãúÎèÑ
        console.log(`${(initAttempts + 1) * 2}Ï¥à ÌõÑ Ïû¨ÏãúÎèÑ`);
        setTimeout(() => {
          initializeAuth();
        }, (initAttempts + 1) * 2000);
      }
    }
  };

  // Î°úÍ∑∏Ïù∏ Ìï®Ïàò
  const signIn = async (email: string, password: string) => {
    try {
      setLoading(true);
      console.log('Î°úÍ∑∏Ïù∏ ÏãúÎèÑ:', email);
      
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password,
      });

      if (error) {
        setLoading(false);
        return { error };
      }

      console.log('Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ:', data.user?.email);
      setHasRedirected(false);
      setInitAttempts(0); // ÏÑ±Í≥µ Ïãú Ïû¨ÏãúÎèÑ Ïπ¥Ïö¥ÌÑ∞ Î¶¨ÏÖã
      
      if (data.user) {
        await loadUserProfile(data.user.id, true);
      }
      
      return { error: null };
    } catch (error) {
      console.error('Î°úÍ∑∏Ïù∏ ÏòàÏô∏:', error);
      setLoading(false);
      return { error };
    }
  };

  // Î°úÍ∑∏ÏïÑÏõÉ Ìï®Ïàò
  const signOut = async () => {
    console.log('Î°úÍ∑∏ÏïÑÏõÉ ÏãúÏûë');
    
    setLoading(true);
    setUser(null);
    setUserProfile(null);
    setHasRedirected(false);
    setInitAttempts(0);
    
    try {
      await supabase.auth.signOut();
      await clearAllCache();
    } catch (error) {
      console.warn('Î°úÍ∑∏ÏïÑÏõÉ Ï§ë Ïò§Î•ò:', error);
    }
    
    setLoading(false);
    
    setTimeout(() => {
      window.location.replace('/login');
    }, 200);
  };

  // Ï¥àÍ∏∞Ìôî
  useEffect(() => {
    let mounted = true;
    
    if (mounted) {
      initializeAuth();
    }
    
    return () => {
      mounted = false;
    };
  }, []); // ÏùòÏ°¥ÏÑ± Î∞∞Ïó¥ ÎπÑÏõÄ

  // Ïù∏Ï¶ù ÏÉÅÌÉú Î≥ÄÌôî Î¶¨Ïä§ÎÑà
  useEffect(() => {
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        console.log('Ïù∏Ï¶ù ÏÉÅÌÉú Î≥ÄÌôî:', event);
        
        if (event === 'SIGNED_OUT') {
          setUser(null);
          setUserProfile(null);
          setHasRedirected(false);
          setLoading(false);
          
          setTimeout(() => {
            if (window.location.pathname !== '/login') {
              window.location.replace('/login');
            }
          }, 100);
          return;
        }
        
        if (event === 'SIGNED_IN') {
          setHasRedirected(false);
          setInitAttempts(0);
        }
        
        setUser(session?.user ?? null);
        
        if (session?.user) {
          const isFromSignInEvent = event === 'SIGNED_IN';
          await loadUserProfile(session.user.id, isFromSignInEvent);
        } else {
          setUserProfile(null);
          setLoading(false);
        }
      }
    );

    return () => {
      subscription.unsubscribe();
    };
  }, []);

  // Í∏¥Í∏â Î™®ÎìúÏùº Îïå ÌäπÎ≥ÑÌïú UI ÌëúÏãú
  if (emergencyMode) {
    return (
      <div className="min-h-screen bg-bg-primary flex items-center justify-center">
        <div className="text-center space-y-4">
          <div className="text-6xl">‚ö†Ô∏è</div>
          <h2 className="text-xl font-semibold text-text-primary">Ïù∏Ï¶ù ÏãúÏä§ÌÖú Ïò§Î•ò</h2>
          <p className="text-text-secondary max-w-md">
            Î°úÍ∑∏Ïù∏ Í≥ºÏ†ïÏóêÏÑú Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. 
            ÏïÑÎûò Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌïòÏó¨ ÏãúÏä§ÌÖúÏùÑ Ï¥àÍ∏∞ÌôîÌïòÍ≥† Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.
          </p>
          <div className="space-y-2">
            <button
              onClick={emergencyReset}
              className="px-6 py-3 bg-accent text-white rounded-lg hover:bg-accent/90"
            >
              ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî ÌõÑ Ïû¨ÏãúÎèÑ
            </button>
            <div className="text-xs text-text-tertiary">
              Î∏åÎùºÏö∞Ï†Ä Ï∫êÏãúÍ∞Ä Ï†ïÎ¶¨ÎêòÍ≥† Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄÎ°ú Ïù¥ÎèôÌï©ÎãàÎã§
            </div>
          </div>
        </div>
      </div>
    );
  }

  const value = {
    user,
    userProfile,
    loading,
    signIn,
    signOut,
    isAdmin: userProfile?.role === 'admin',
    isCounselor: userProfile?.role === 'counselor',
    emergencyReset,
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
}

// useAuth ÌõÖ
export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuthÎäî AuthProvider ÎÇ¥Î∂ÄÏóêÏÑúÎßå ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏäµÎãàÎã§');
  }
  return context;
};

// Í∞úÎ∞ú ÌôòÍ≤ΩÏö© ÎîîÎ≤ÑÍ∑∏ + ÌîÑÎ°úÎçïÏÖòÏö© Í∏¥Í∏â Î≤ÑÌäº
export function AuthDebugInfo() {
  const { user, userProfile, loading, emergencyReset } = useAuth();
  const [mounted, setMounted] = useState(false);
  const [showEmergencyButton, setShowEmergencyButton] = useState(false);
  const [currentPath, setCurrentPath] = useState('');
  
  useEffect(() => {
    setMounted(true);
    setCurrentPath(window.location.pathname);
    
    // Í≤ΩÎ°ú Î≥ÄÍ≤Ω Í∞êÏßÄ
    const updatePath = () => {
      setCurrentPath(window.location.pathname);
    };
    
    // popstate Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà (Îí§Î°úÍ∞ÄÍ∏∞/ÏïûÏúºÎ°úÍ∞ÄÍ∏∞)
    window.addEventListener('popstate', updatePath);
    
    // Ï£ºÍ∏∞Ï†ÅÏúºÎ°ú Í≤ΩÎ°ú ÌôïÏù∏ (SPAÏóêÏÑú Í≤ΩÎ°ú Î≥ÄÍ≤Ω Í∞êÏßÄ)
    const pathInterval = setInterval(updatePath, 1000);
    
    return () => {
      window.removeEventListener('popstate', updatePath);
      clearInterval(pathInterval);
    };
  }, []);
  
  // ÏÇ¨Ïö©Ïûê ÏÉÅÌÉú Î≥ÄÍ≤Ω Ïãú Í≤ΩÎ°ú ÏóÖÎç∞Ïù¥Ìä∏
  useEffect(() => {
    if (!user && !loading) {
      // Î°úÍ∑∏ÏïÑÏõÉ ÏÉÅÌÉúÏùº Îïå ÌòÑÏû¨ Í≤ΩÎ°ú Îã§Ïãú ÌôïÏù∏
      setCurrentPath(window.location.pathname);
    }
  }, [user, loading]);
  
  useEffect(() => {
    // 10Ï¥à ÌõÑ Í∏¥Í∏â Î≤ÑÌäº ÌëúÏãú (Î¨¥ÌïúÎ°úÎî© Í∞êÏßÄ)
    if (loading) {
      const timer = setTimeout(() => {
        setShowEmergencyButton(true);
      }, 10000);
      
      return () => clearTimeout(timer);
    } else {
      setShowEmergencyButton(false);
    }
  }, [loading]);
  
  if (!mounted) return null;
  
  // ÌîÑÎ°úÎçïÏÖòÏóêÏÑúÎäî Í∏¥Í∏â Î≤ÑÌäºÎßå ÌëúÏãú
  if (process.env.NODE_ENV === 'production') {
    if (!showEmergencyButton || !loading) return null;
    
    return (
      <div className="fixed top-4 right-4 bg-red-500 text-white px-4 py-3 rounded-lg shadow-lg z-50">
        <div className="text-center space-y-2">
          <div className="text-sm font-medium">Î°úÎî©Ïù¥ ÎÑàÎ¨¥ Ïò§Îûò Í±∏Î¶¨ÎÇòÏöî?</div>
          <button
            onClick={emergencyReset}
            className="px-3 py-1 bg-white text-red-500 rounded text-sm hover:bg-gray-100"
          >
            Î¨∏Ï†ú Ìï¥Í≤∞ÌïòÍ∏∞
          </button>
        </div>
      </div>
    );
  }
  
  // Í∞úÎ∞ú ÌôòÍ≤ΩÏóêÏÑúÎäî Ï†ÑÏ≤¥ ÎîîÎ≤ÑÍ∑∏ Ï†ïÎ≥¥ ÌëúÏãú
  return (
    <div className="fixed top-4 right-4 bg-black/90 text-white px-3 py-2 rounded-lg text-xs shadow-lg z-50 border border-gray-600">
      <div className="flex items-center gap-2">
        {loading ? (
          <div className="flex items-center gap-1">
            <div className="w-2 h-2 bg-yellow-400 rounded-full animate-pulse"></div>
            <span className="text-yellow-400">Loading...</span>
          </div>
        ) : userProfile ? (
          <div className="text-green-400 font-medium">
            ‚úÖ {userProfile.full_name} ({userProfile.role})
          </div>
        ) : user ? (
          <div className="text-yellow-400">
            ‚ö†Ô∏è {user.email} (ÌîÑÎ°úÌïÑ ÏóÜÏùå)
          </div>
        ) : (
          <span className="text-red-400">‚ùå Not logged in</span>
        )}
      </div>
      
      <div className="mt-2 space-y-1">
        <div className="text-xs space-y-1">
          <div>
            <span className="text-gray-400">User ID:</span> 
            <span className="text-cyan-400 ml-1">
              {user?.id ? `${user.id.slice(0, 8)}...` : 'null'}
            </span>
          </div>
          <div>
            <span className="text-gray-400">Email:</span> 
            <span className="text-blue-400 ml-1">
              {user?.email || 'null'}
            </span>
          </div>
          <div>
            <span className="text-gray-400">Role:</span> 
            <span className="text-orange-400 ml-1">
              {userProfile?.role || 'null'}
            </span>
          </div>
          <div>
            <span className="text-gray-400">Path:</span> 
            <span className="text-purple-400 ml-1">
              {currentPath || 'Loading...'}
            </span>
          </div>
        </div>
        
        <button 
          onClick={() => {
            clearAllCache();
            window.location.href = '/login';
          }}
          className="px-2 py-1 bg-yellow-500 text-white rounded text-xs hover:bg-yellow-600 w-full"
        >
          Ï∫êÏãú Ï†ïÎ¶¨
        </button>
        <button 
          onClick={emergencyReset}
          className="px-2 py-1 bg-red-500 text-white rounded text-xs hover:bg-red-600 w-full"
        >
          Í∏¥Í∏â Î¶¨ÏÖã
        </button>
      </div>
    </div>
  );
}